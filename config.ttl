# Licensed under the terms of http://www.apache.org/licenses/LICENSE-2.0

## Fuseki Server configuration file.

@prefix :        <#> .
@prefix fuseki:  <http://jena.apache.org/fuseki#> .
@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> .
@prefix skos:    <http://www.w3.org/2004/02/skos/core#> .
@prefix kgo:     <http://solid.boltz.cs.cmu.edu:3030/ontology#> .
@prefix boltz:   <http://solid.boltz.cs.cmu.edu:3030/> .
@prefix ja:      <http://jena.hpl.hp.com/2005/11/Assembler#> .

   # Example::
   # Server-wide query timeout.   
   # 
   # Timeout - server-wide default: milliseconds.
   # Format 1: "1000" -- 1 second timeout
   # Format 2: "10000,60000" -- 10s timeout to first result, 
   #                            then 60s timeout for the rest of query.
   #
   # See javadoc for ARQ.queryTimeout for details.
   # This can also be set on a per dataset basis in the dataset assembler.
   #
   # ja:context [ ja:cxtName "arq:queryTimeout" ;  ja:cxtValue "30000" ] ;

   # Add any custom classes you want to load.
   # Must have a "public static void init()" method.
   # ja:loadClass "your.code.Class" ;   

[] rdf:type fuseki:Server ;
	fuseki:services (
		:mainService
		:ontService
		:devService
		:scratchService
	) ;
.

:ontService a fuseki:Service;
	fuseki:name "Demo" ;
	fuseki:endpoint [
		fuseki:operation fuseki:query ;
		fuseki:name "sparql"
	] ;
	fuseki:dataset	:nonInfDataset ;
	.

:mainService rdf:type fuseki:Service ;
    fuseki:name "Inference" ;
    fuseki:endpoint [ 
         # SPARQL query service
        fuseki:operation fuseki:query ; 
        fuseki:name "sparql"
    ] ;
    fuseki:endpoint [ 
         # SPARQL query service (alt name)
        fuseki:operation fuseki:query ; 
        fuseki:name "query" 
    ] ;

    fuseki:endpoint [ 
         # HTML file upload service
        fuseki:operation fuseki:update ; 
        fuseki:name "update" 
    ] ;

    fuseki:endpoint [ 
         # SPARQL Graph Store Protocol (read)
        fuseki:operation fuseki:gsp_r ; 
        fuseki:name "get" 
    ] ;
    fuseki:endpoint [ 
        # SPARQL Graph Store Protcol (read and write)
        fuseki:operation fuseki:gsp_rw ; 
        fuseki:name "data" 
    ] ;
	fuseki:dataset :infDataset ;
    .

# Dataset with only the default graph.
:infDataset rdf:type       ja:RDFDataset ;
	ja:defaultGraph		:model_inf ;
	ja:context [ ja:cxtName "arq:queryTimeout" ;  ja:cxtValue "30000" ] ;
    .

# The inference model
:model_inf a ja:InfModel ;
	 rdfs:label "Inference Model" ;
     ja:baseModel :baseModel ;
     ja:reasoner [
         ja:reasonerURL <http://jena.hpl.hp.com/2003/TransitiveReasoner>
     ] 
	.

:nonInfDataset rdf:type ja:RDFDataset ;
	ja:defaultGraph 	:baseModel ;
	.

# The base data.
:baseModel a ja:MemoryModel ;
	rdfs:label "Base Model" ;
    ja:content [ja:externalContent <file:demo/Data.ttl> ; 
				ja:externalContent <file:demo/Ontology.ttl> ; 
				ja:externalContent <file:demo/Imports.ttl> ;
				ja:externalContent <file:demo/qudt_units.ttl> ;
				ja:externalContent <file:demo/qudt.ttl> ] ;
    .


:devService rdf:type fuseki:Service ;
    fuseki:name "Devel" ;
    fuseki:endpoint [ 
         # SPARQL query service
        fuseki:operation fuseki:query ; 
        fuseki:name "sparql"
    ] ;
    fuseki:endpoint [ 
         # SPARQL query service (alt name)
        fuseki:operation fuseki:query ; 
        fuseki:name "query" 
    ] ;

    fuseki:endpoint [ 
         # HTML file upload service
        fuseki:operation fuseki:update ; 
        fuseki:name "update" 
    ] ;

    fuseki:endpoint [ 
         # SPARQL Graph Store Protocol (read)
        fuseki:operation fuseki:gsp_r ; 
        fuseki:name "get" 
    ] ;
    fuseki:endpoint [ 
        # SPARQL Graph Store Protcol (read and write)
        fuseki:operation fuseki:gsp_rw ; 
        fuseki:name "data" 
    ] ;
	fuseki:dataset :devDataset ;
    .

:devDataset rdf:type ja:RDFDataset ;
	ja:defaultGraph 	:devModel ;
	.

:devModel a ja:MemoryModel ;
	rdfs:label "Dev Model" ;
    ja:content [ja:externalContent <file:devel/Data.ttl> ; 
				ja:externalContent <file:devel/Ontology.ttl> ; 
				ja:externalContent <file:devel/Imports.ttl> ;
				ja:externalContent <file:devel/qudt_units.ttl> ;
				ja:externalContent <file:devel/qudt.ttl>] ;
    .



:scratchService rdf:type fuseki:Service ;
    fuseki:name "Scratch" ;
    fuseki:endpoint [ 
         # SPARQL query service
        fuseki:operation fuseki:query ; 
        fuseki:name "sparql"
    ] ;
    fuseki:endpoint [ 
         # SPARQL query service (alt name)
        fuseki:operation fuseki:query ; 
        fuseki:name "query" 
    ] ;

    fuseki:endpoint [ 
         # HTML file upload service
        fuseki:operation fuseki:update ; 
        fuseki:name "update" 
    ] ;

    fuseki:endpoint [ 
         # SPARQL Graph Store Protocol (read)
        fuseki:operation fuseki:gsp_r ; 
        fuseki:name "get" 
    ] ;
    fuseki:endpoint [ 
        # SPARQL Graph Store Protcol (read and write)
        fuseki:operation fuseki:gsp_rw ; 
        fuseki:name "data" 
    ] ;
	fuseki:dataset :scratchDataset ;
    .

:scratchDataset rdf:type ja:RDFDataset ;
	ja:defaultGraph 	:scratchModel ;
	.

:scratchModel a ja:MemoryModel ;
	rdfs:label "Scratch Model" ;
    ja:content [ja:externalContent <file:scratch/Data.ttl> ; 
				ja:externalContent <file:scratch/Ontology.ttl> ; 
				ja:externalContent <file:scratch/Imports.ttl> ;
				ja:externalContent <file:scratch/qudt_units.ttl> ;
				ja:externalContent <file:scratch/qudt.ttl>] ;
    .
